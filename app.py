from flask import Flask, render_template, request, jsonify
import requests

app = Flask(__name__)

# ‚úÖ API KEYS
WEATHER_API_KEY = "edcc6078ab2e4cc8847100037250108"  # WeatherAPI key
GEMINI_API_KEY = "AIzaSyB2WqddUOVhOrnCcxkgCRdRN-v7BPOTilg"  # Gemini key

@app.route("/")
def home():
    return render_template("index.html")

# üå§ Weather API
@app.route("/get_weather", methods=["POST"])
def get_weather():
    city = request.json.get("city")
    url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}&aqi=yes"
    response = requests.get(url).json()
    return jsonify(response)

# üå§ Gemini Chatbot
@app.route("/ask_gemini", methods=["POST"])
def ask_gemini():
    user_query = request.json.get("query")
    city = request.json.get("city")
    category = request.json.get("category")

    if category == "other":
        prompt = f"User's question: {user_query}\nAnswer in a detailed and simple way."
    else:
        weather_url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}&aqi=yes"
        weather_response = requests.get(weather_url).json()
        if "error" in weather_response:
            weather_summary = f"Weather data for {city} could not be retrieved."
        else:
            weather_summary = (
                f"Current weather in {weather_response['location']['name']}, {weather_response['location']['country']}: "
                f"{weather_response['current']['condition']['text']}, {weather_response['current']['temp_c']}¬∞C, "
                f"humidity {weather_response['current']['humidity']}%, wind speed {weather_response['current']['wind_kph']} kph."
            )
        prompt = f"{weather_summary}\nUser‚Äôs question: {user_query}\nAnswer based on the above weather information."

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={GEMINI_API_KEY}"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    headers = {"Content-Type": "application/json"}

    response = requests.post(url, json=payload, headers=headers).json()
    try:
        answer = response["candidates"][0]["content"]["parts"][0]["text"]
    except (KeyError, IndexError):
        answer = "‚ùå Sorry, I couldn‚Äôt get a response."

    return jsonify({"answer": answer})

# üê¶ Tweet Generator
@app.route("/generate_tweet", methods=["POST"])
def generate_tweet():
    data = request.json
    tweet_type = data.get("type", "general")
    context = data.get("context", "")
    lines = data.get("lines", 1)

    prompt = f"""
    You are a tweet generator.
    Write a {tweet_type} tweet about: "{context}".
    The tweet should be at most {lines} lines, and not exceed 120 words in total.
    Automatically include 2-4 relevant hashtags at the end.
    When asked for funny tweets be brutally roasting and making fun.
    Do NOT mention AI, Gemini, or that it was generated by a model.
    Just output the tweet text only.
    """

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={GEMINI_API_KEY}"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    headers = {"Content-Type": "application/json"}

    response = requests.post(url, json=payload, headers=headers).json()
    try:
        tweet = response["candidates"][0]["content"]["parts"][0]["text"]
    except (KeyError, IndexError):
        tweet = "‚ùå Sorry, I couldn‚Äôt generate a tweet."

    return jsonify({"tweet": tweet})

# üé¨ Movie Suggestor
@app.route("/suggest_movie", methods=["POST"])
def suggest_movie():
    data = request.json
    industry = data.get("industry", "Bollywood")
    genre = data.get("genre", "Any")
    era = data.get("era", "Any")  # new field

    if era == "New":
        year_pref = "After 2018"
    elif era == "Old":
        year_pref = "Before 2018"
    else:
        year_pref = "Any"

    prompt = f"""
    You are a movie recommendation expert.
    Suggest 5 highly-rated and popular {industry} movies in India that match:
    - Genre: {genre}
    - Year Preference: {year_pref}

    Movies must be well-known, popular, and rated highly on IMDB or by critics.
    If 'Top 10 in India', include movies across Bollywood, Tollywood, Hollywood, and regional cinemas that are blockbusters.
    """

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={GEMINI_API_KEY}"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    headers = {"Content-Type": "application/json"}

    response = requests.post(url, json=payload, headers=headers).json()
    try:
        suggestions = response["candidates"][0]["content"]["parts"][0]["text"]
    except (KeyError, IndexError):
        suggestions = "‚ùå Sorry, I couldn‚Äôt fetch movie suggestions."

    return jsonify({"movies": suggestions})

# ‚úÖ Run the app
if __name__ == "__main__":
    app.run(debug=True)
